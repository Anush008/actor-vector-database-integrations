# generated by datamodel-codegen:
#   filename:  input_schema.json
#   timestamp: 2024-05-30T07:27:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class EmbeddingsProvider(Enum):
    OpenAIEmbeddings = 'OpenAIEmbeddings'
    CohereEmbeddings = 'CohereEmbeddings'


class PineconeIntegration(BaseModel):
    pineconeIndexName: str = Field(
        ...,
        description='Name of the Pinecone index where the data will be stored',
        title='Pinecone index name',
    )
    pineconeApiKey: str = Field(
        ..., description='Pinecone API KEY', title='Pinecone API KEY'
    )
    embeddingsProvider: EmbeddingsProvider = Field(
        ...,
        description='Choose the embeddings provider to use for generating embeddings',
        title='Embeddings provider (as defined in the langchain API)',
    )
    embeddingsConfig: Optional[Dict[str, Any]] = Field(
        None,
        description='Specific configuration for the embeddings. For example, for OpenAI, you can the model name as {"model": "text-embedding-ada-002"})',
        title='Embeddings provider configuration',
    )
    embeddingsApiKey: Optional[str] = Field(
        None,
        description='Value of the API KEY for the embeddings provider (if required).\n\n For example for OpenAI it is OPENAI_API_KEY, for Cohere it is COHERE_API_KEY)',
        title='Embeddings API KEY (whenever applicable, depends on provider)',
    )
    datasetFields: List = Field(
        ...,
        description='This array specifies the dataset fields to be selected and stored in the vector store. Only the fields listed here will be included in the vector store. For instance, when using the Website Content Crawler, you might choose to include fields such as `text`, `url`, and `metadata.title` in the vector store.',
        title='A list of dataset fields which should be selected from the dataset results',
    )
    metadataDatasetFields: Optional[Dict[str, Any]] = Field(
        None,
        description='A list of dataset fields which should be selected from the dataset and stored as metadata in the vector stores. \n\n For example, when using the Website Content Crawler, you might want to store `url` in metadata. In this case, use `metadataDatasetFields parameter as follows {"page_url": "url"}`',
        title='A list of dataset fields to be selected from the dataset and stored as metadata in the database',
    )
    metadataObject: Optional[Dict[str, Any]] = Field(
        None,
        description='This object allows you to store custom metadata for every item in the vector store. For example, if you want to store the `domain` as metadata, use the `metadataObject` like this: {"domain": "apify.com"}.',
        title='Custom object to be stored as metadata in the vector store database',
    )
    performChunking: Optional[bool] = Field(
        False,
        description='If set to true, the resulting text will be chunked according to the settings below',
        title='Perform chunking',
    )
    chunkSize: Optional[int] = Field(
        1000,
        description='The maximum character length of each text chunk',
        ge=1,
        title='Chunk size',
    )
    chunkOverlap: Optional[int] = Field(
        0,
        description='The character overlap between text chunks that are next to each other',
        ge=0,
        title='Chunk overlap',
    )
    cacheEnabled: Optional[bool] = Field(
        True,
        description="This setting is applicable for runs following the initial one. When enabled (set to true), the system only adds new content to the vector database and removes orphaned documents, including their vectors. A document is considered orphaned if it hasn't been crawled in subsequent runs and its last seen date exceeds the `orphanedDocAgeLimitDays`. The system internally compares all documents, including their content and metadata, to identify new or orphaned documents.",
        title='Enable caching for subsequent runs',
    )
    cacheName: Optional[str] = Field(
        None,
        description="The name of the cache stored in Apify's key-value store. By default, it is set to the actor ID that triggered this integration. The name must be unique for different actors. Do not change this value unless you know what you are doing.",
        title='Cache key name',
    )
    datasetKeysToItemId: Optional[List[str]] = Field(
        ['url'],
        description='This array contains keys that are used to uniquely identify items, which helps to handle content changes across different runs. For instance, in a web content crawling scenario, the `url` field could serve as a unique identifier for each item.',
        title='Keys for Item Identification',
    )
    orphanedDocAgeLimitDays: Optional[float] = Field(
        7,
        description='The number of days after which orphaned documents are deleted from the database.',
        ge=0.0,
        title='Delete orphaned documents older than days limit',
    )
    datasetId: Optional[str] = Field(
        None,
        description='Dataset ID (when running standalone without integration)',
        title='Dataset ID',
    )
